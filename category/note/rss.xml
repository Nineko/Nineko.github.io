<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Nineko&#39;s Blog • Posts by &#34;note&#34; category</title>
        <link>https://nineko.github.io</link>
        <description></description>
        <language>zh-TW</language>
        <pubDate>Fri, 04 Sep 2020 14:06:56 +0800</pubDate>
        <lastBuildDate>Fri, 04 Sep 2020 14:06:56 +0800</lastBuildDate>
        <category>DNN</category>
        <category>QT</category>
        <category>Computer Vision</category>
        <category>Pose Estimation</category>
        <category>Python</category>
        <item>
            <guid isPermalink="true">https://nineko.github.io/2020/09/04/Python-crawler/</guid>
            <title>[筆記]Python應用-爬蟲</title>
            <link>https://nineko.github.io/2020/09/04/Python-crawler/</link>
            <category>Python</category>
            <pubDate>Fri, 04 Sep 2020 14:06:56 +0800</pubDate>
            <description><![CDATA[ &lt;h1&gt;何謂爬蟲&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;  爬蟲以白話來說的話就是一個從網頁上抓資料下來的動作，舉一個例子來說 : NVIDIA 最近出了新型號的顯示卡，那麼舊型號勢必會跌價，你今天想研究它跌價的趨勢，並試圖預估最低點撿個便宜，所以你每天都上露天去記錄金額的變化，但是每天上去記錄實在是太麻煩了，不僅容易忘記，記錄還得花上一段時間，面對這種情形，使用爬蟲便會是一個很好的解決方案，爬蟲的用意就是為了解決這種重複性高，大量且單調的工作，有了爬蟲工具，資料科學家便能更方便的蒐集資料，能夠專心的投入在分析上。&lt;/p&gt;
&lt;h1&gt;Python上的爬蟲&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;  那麼在 Python 上該如何撰寫一個爬蟲程式呢？這方面 Python 為我們帶來了完善的解決方案，只要有 requests 加上 BeautifulSoup 兩個套件便可以進行爬蟲程式的撰寫。&lt;/p&gt;
&lt;h2&gt;requests&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;  requests 套件給予我們在 Python 上能夠操作網頁的基本功能，如 GET、 POST 、 PUT、 DELETE、 HEAD、 OPTIONS、 Cookie 操作等功能，在本章節中主要使用 GET 來獲取網頁中的內容，是爬蟲的第一步。&lt;/p&gt;
&lt;p&gt;安裝 requests :&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;pip install requests&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;基本 GET 方法使用 :&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; requests&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;result = requests.get(&lt;span class=&#34;string&#34;&gt;&amp;#x27;https://nineko.github.io&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print(result.text)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;crawler01.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;  使用 GET 能夠將網頁的程式碼整個拿下來，所有網頁的資訊都在這裡頭，所以接下的的動作就是來解析並過濾出我們所需要的資訊，而這個則需要方才所說的另一個套件，BeautifulSoup。&lt;/p&gt;
&lt;h2&gt;BeautifulSoup&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;  BeautifulSoup 能夠為我們解析 HTML，將其轉換成能夠快速查找資訊的資料結構供後續操作，並提供相應的查找方式，迅速過濾出使用者想要的標籤，可謂是爬蟲的一大利器。&lt;/p&gt;
&lt;p&gt;安裝 requests :&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;pip install beautifulsoup4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;基本方法使用 :&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; requests&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; bs4 &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; BeautifulSoup &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;result = requests.get(&lt;span class=&#34;string&#34;&gt;&amp;#x27;https://nineko.github.io&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;soup = BeautifulSoup(result, &lt;span class=&#34;string&#34;&gt;&amp;#x27;html.parser&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print(soup.prettify())&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;crawler02.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;  不要看打印出來看起來只是稍微改了點縮排而已，但是內部已經建構了一個特別的資料結構，我們可以用 BeautifulSoup 提供的 select 方法來提取標籤內容。&lt;/p&gt;
&lt;p&gt;查找標籤 :&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; requests&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; bs4 &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; BeautifulSoup &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;result = requests.get(&lt;span class=&#34;string&#34;&gt;&amp;#x27;https://nineko.github.io&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;soup = BeautifulSoup(result, &lt;span class=&#34;string&#34;&gt;&amp;#x27;html.parser&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;title = soup.select(&lt;span class=&#34;string&#34;&gt;&amp;quot;h3.home-article-title&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; t &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; title:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  print(t.text)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;crawler03.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;  你看，只要短短的幾行程式碼便可以把我 Blog 文章的標題濾出，不過看到這的人可能會有個疑問，這個 &lt;code&gt;h3.home-article-title&lt;/code&gt;  哪來的？現在的 Chrome 或是我常用的 OperaGX 等瀏覽器都有可以觀看程式碼的方式，像是 Chrome 能夠點 &lt;code&gt;F12&lt;/code&gt;  進入或是在你想看的元件上右鍵選單中的檢查元件都可以跳到其程式碼的部分，觀看程式碼便可以得知其目前標籤，這個 &lt;code&gt;h3.home-article-title&lt;/code&gt;  便是這麼來的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;crawler04.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h1&gt;實戰範例&lt;/h1&gt;
&lt;hr&gt;
&lt;h2&gt;基本單頁&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;  那麼基本工具都準備好了，現在來實戰看看，我們利用一開始的小例子，去露天鎖定 NVIDIA GTX1060 的顯示卡，把商品名與價錢爬下來，GO！&lt;/p&gt;
&lt;p&gt;  首先得先去露天實際搜尋看看整個頁面，檢查一下商品名的標籤。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;crawler05.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;那我們就以剛剛的思路試著爬爬看&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; requests&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; bs4 &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; BeautifulSoup &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;result = requests.get(&lt;span class=&#34;string&#34;&gt;&amp;#x27;https://find.ruten.com.tw/s/?cateid=0011000500210001&amp;amp;q=GTX1060&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;soup = BeautifulSoup(result, &lt;span class=&#34;string&#34;&gt;&amp;#x27;html.parser&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;title = soup.select(&lt;span class=&#34;string&#34;&gt;&amp;quot;h5.prod_name&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; t &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; title:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  print(t)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;crawler06.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;  什麼！被拒絕了，不過別緊張，這是因為很多網站都有著檢查 User-Agent 的機制，若你不設定 User-Agent 就會被檔下來，所以我們可以見招拆招，它需要 User-Agent ，我們就給它一個，在這邊我們可以使用自己瀏覽器的 User-Agent ，像我的就是 &lt;code&gt;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.83 Safari/537.36&lt;/code&gt; ，或是使用 Python 的  &lt;code&gt;fake-useragent&lt;/code&gt;  套件產生，再者也可以使用現有的一些 User-Agent，像是 Google 就有 GoogleBot 可以使用，我們接下來就使用 GoogleBot 來進行，所以對程式碼進行一些修改後。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# New&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;headers = &amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;#x27;User-Agent&amp;#x27;&lt;/span&gt;:&lt;span class=&#34;string&#34;&gt;&amp;#x27;GoogleBot&amp;#x27;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# Add headers&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;result = requests.get(&lt;span class=&#34;string&#34;&gt;&amp;#x27;https://find.ruten.com.tw/s/?cateid=0011000500210001&amp;amp;q=GTX1060&amp;#x27;&lt;/span&gt;,headers=headers)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;crawler07.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;  很好！順利爬到了，不過我們可以看到每個商品的  &lt;code&gt;&amp;lt;h5&amp;gt;&lt;/code&gt;  中都還包了兩個  &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;  以及一個  &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;  標籤，我們需要的商品名是在  &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;  標籤中，所以我們將 select 的條件再往下一層。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;title = soup.select(&lt;span class=&#34;string&#34;&gt;&amp;quot;h5.prod_name a&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;crawler08.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;  這樣一來我們就可以只獲取  &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;  標籤中的內容，成功的爬到商品名稱，同理，價格的部分也可以以這樣的方式爬到，完整的程式碼如下，其中  &lt;code&gt;price_list = price_list[1::2]&lt;/code&gt;  的理由是因為爬下來的資料每筆會有兩個價格，因為有些商品價格會是一個範圍，所以這邊使用  &lt;code&gt;[1::2]&lt;/code&gt;  來取偶數項，也就是範圍中較大的價格值 :&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; requests&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; bs4 &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; BeautifulSoup &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; bs4 &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; BeautifulSoup &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;headers = &amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;#x27;User-Agent&amp;#x27;&lt;/span&gt;:&lt;span class=&#34;string&#34;&gt;&amp;#x27;GoogleBot&amp;#x27;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;result = requests.get(&lt;span class=&#34;string&#34;&gt;&amp;#x27;https://find.ruten.com.tw/s/?cateid=0011000500210001&amp;amp;q=GTX1060&amp;#x27;&lt;/span&gt;,headers=headers)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;soup = BeautifulSoup(result.text, &lt;span class=&#34;string&#34;&gt;&amp;#x27;html.parser&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;title = soup.select(&lt;span class=&#34;string&#34;&gt;&amp;#x27;h5.prod_name a&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;price = soup.select(&lt;span class=&#34;string&#34;&gt;&amp;quot;ul.price_box li.about span.price&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;title_list = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;price_list = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; t &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; title:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    title_list.append(t.text)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; p &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; price:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    price_list.append(p.text)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;price_list = price_list[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;::&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; t,p &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; zip(title_list,price_list) :&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; print(t+&lt;span class=&#34;string&#34;&gt;&amp;quot;\t&amp;quot;&lt;/span&gt;+p)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;crawler09.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h2&gt;進階強化&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;  剛剛我們成功爬下來單頁的資料，接下來要更加進階了，我們試著爬多頁資料，首先先來看看到第 2 頁網址會發生甚麼變化 :&lt;/p&gt;
&lt;figure class=&#34;highlight&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#第一頁&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;https://find.ruten.com.tw/s/?cateid=0011000500210001&amp;amp;q=GTX1060&amp;amp;sort=prc%2Fac&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#第二頁&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;https://find.ruten.com.tw/s/?cateid=0011000500210001&amp;amp;p=2&amp;amp;q=GTX1060&amp;amp;sort=prc%2Fac&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  可以明顯的看到多了  &lt;code&gt;&amp;amp;p=2&lt;/code&gt;  這個參數，試著調整這個數值的確帶我們到了其他頁，所以我們現在知道  &lt;code&gt;&amp;amp;p=2&lt;/code&gt;  代表著第二頁，藉由改變數字可以跳轉至其他頁，那麼問題就簡單了，我們可以修改  &lt;code&gt;requests.get&lt;/code&gt;  的網址來獲取其他頁的訊息。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; requests&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; bs4 &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; BeautifulSoup &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; bs4 &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; BeautifulSoup &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;headers = &amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;#x27;User-Agent&amp;#x27;&lt;/span&gt;:&lt;span class=&#34;string&#34;&gt;&amp;#x27;GoogleBot&amp;#x27;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;url = &lt;span class=&#34;string&#34;&gt;&amp;quot;https://find.ruten.com.tw/s/?cateid=0011000500210001&amp;amp;p=&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;page= &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;url2= &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;amp;q=GTX1060&amp;amp;sort=prc%2Fac&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;title_list = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;price_list = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;while&lt;/span&gt;(&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    result = requests.get(url+str(page)+url2,headers=headers)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; result.status_code == requests.codes.ok :&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     soup = BeautifulSoup(result.text, &lt;span class=&#34;string&#34;&gt;&amp;#x27;html.parser&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     title = soup.select(&lt;span class=&#34;string&#34;&gt;&amp;#x27;h5.prod_name a&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     price = soup.select(&lt;span class=&#34;string&#34;&gt;&amp;quot;ul.price_box li.about span.price&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; t &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; title:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      title_list.append(t.text)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; p &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; price:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      price_list.append(p.text)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     page+=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;keyword&#34;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;price_list = price_list[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;::&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; t,p &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; zip(title_list,price_list) :&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; print(t+&lt;span class=&#34;string&#34;&gt;&amp;quot;\t&amp;quot;&lt;/span&gt;+p)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  在這邊我們做了幾點修改，首先是  &lt;code&gt;requests.get&lt;/code&gt;  傳入 URL 的組合字串，藉由改變  &lt;code&gt;page&lt;/code&gt;  參數來獲取其他頁資料，再來為了遍歷所有頁，使用  &lt;code&gt;while&lt;/code&gt;  來持續遍歷，並藉由  &lt;code&gt;requests.get&lt;/code&gt;  的  &lt;code&gt;status_code&lt;/code&gt;  ，成功為  &lt;code&gt;200&lt;/code&gt;  做為是否繼續的判斷點，如此一來便可以將所有搜尋資料通通都爬下來了，接下來為了方便分析，我們要將其存成檔案，我們可以利用  &lt;code&gt;csv&lt;/code&gt;  套件將其存成 .csv 檔，或是使用  &lt;code&gt;pandas&lt;/code&gt;  套件處理，我們這裡採用  &lt;code&gt;pandas&lt;/code&gt;  來進行處理， &lt;code&gt;pandas&lt;/code&gt;  功能強大，雖然我們今天只要處理兩欄的小資料，但若之後需要處理較多欄位的大資料會比較方便， &lt;code&gt;pandas&lt;/code&gt;  的安裝及使用我會到 深度學習的訓練資料準備 的文章內再解說，這邊就直接使用。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;df = pd.DataFrame(&amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;#x27;商品名&amp;#x27;&lt;/span&gt;:title_list,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                   &lt;span class=&#34;string&#34;&gt;&amp;#x27;價格&amp;#x27;&lt;/span&gt;  :price_list&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;df.to_csv(&lt;span class=&#34;string&#34;&gt;&amp;#x27;GTX1060.csv&amp;#x27;&lt;/span&gt;, encoding=&lt;span class=&#34;string&#34;&gt;&amp;#x27;utf_8_sig&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;crawler10.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://nineko.github.io/2020/08/06/Note-Py-TrainingData/</guid>
            <title>[筆記]深度學習-訓練資料導入</title>
            <link>https://nineko.github.io/2020/08/06/Note-Py-TrainingData/</link>
            <category>DNN</category>
            <pubDate>Thu, 06 Aug 2020 16:53:59 +0800</pubDate>
            <description><![CDATA[ &lt;h1&gt;訓練資料導入&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;紀錄為了能將訓練資料序列化所進行的轉換動作；&lt;br&gt;
利用 Pandas package 將資料轉換成 Data frame，再以 PKL 檔案格式儲存。&lt;/p&gt;
&lt;h1&gt;資料預處理&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;在本例中以 CAD 模型的圖像資料為例，每個類別中有不同虛擬相機視點的組合，每種組合中都儲存了模型的圖像及模型線框的圖像如下的資料夾結構：&lt;/p&gt;
&lt;figure class=&#34;highlight plain&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Class 1 --&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; model --&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Angle 1--&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      img&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Angle 2--&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      img&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; wireframe --&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Angle 1--&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      img&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  Angle 2--&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      img&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Class 2 --&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ... ...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;當然只要有辦法處裡，用任何結構儲存都行&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;c = list(zip(ModelImageList, WireImageList))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;shuffle(c)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ModelImageList, WireImageList = zip(*c)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;final_dict = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;quot;Model&amp;quot;&lt;/span&gt;    : ModelImageList,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;quot;Wireframe&amp;quot;&lt;/span&gt;: WireImageList&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;df = pd.DataFrame(final_dict)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;df.to_pickle(saveName)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;此為轉換成 PKL 檔案的主要指令&lt;br&gt;
另外也能夠存成 CSV 檔案&lt;br&gt;
不過若是儲存的內容屬於多維度的資訊&lt;br&gt;
使用 PKL 會比較好一些&lt;/p&gt;
&lt;h2 id=&#34;訓練時使用pkl檔案&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#訓練時使用pkl檔案&#34;&gt;#&lt;/a&gt; 訓練時使用 PKL 檔案&lt;/h2&gt;
&lt;p&gt;使用 keras 的 Sequence 類，能夠建立一個能夠將資料在訓練中依照 batch 數量即時讀入並進入訓練的類別&lt;br&gt;
基本架構為&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;DataSequence&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;Sequence&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;__init__&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, df, batch_size, mode=&lt;span class=&#34;string&#34;&gt;&amp;#x27;train&amp;#x27;&lt;/span&gt;&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.df = df&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.bsz = batch_size&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        self.mode = mode &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;__len__&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; int(math.ceil(len(self.df) / float(self.bsz)))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;__getitem__&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, idx&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;df 為前述的 PKL 檔案，能利用 data = pd.read_pickle (PKL_Dir) 進行讀檔後輸入&lt;br&gt;
讀入的 df 中包含許多資料，在 &lt;strong&gt;init&lt;/strong&gt; 中進行進一步的讀取為&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;__init__&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, df, batch_size, mode=&lt;span class=&#34;string&#34;&gt;&amp;#x27;train&amp;#x27;&lt;/span&gt;&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    self.df = df&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    self.bsz = batch_size&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    self.mode = mode &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    self.Wireframe_list = self.df[&lt;span class=&#34;string&#34;&gt;&amp;#x27;Wireframe&amp;#x27;&lt;/span&gt;].tolist()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    self.Model_list = self.df[&lt;span class=&#34;string&#34;&gt;&amp;#x27;Model&amp;#x27;&lt;/span&gt;].tolist()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    self.indexes = np.arange(len(self.df[&lt;span class=&#34;string&#34;&gt;&amp;#x27;Model&amp;#x27;&lt;/span&gt;].tolist()))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中因為本例中 PKL 檔案儲存的為影像的路徑，為 list 資料，所以使用 .tolist () 進行讀取，若儲存的為數值型資料，能夠利用 .values 進行讀取&lt;br&gt;
此外再新增 on_epoch_end () 使整個 epoch 的資料使用完時，能夠在自動洗亂一次&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;on_epoch_end&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    self.indexes = np.arange(len(self.Model_list))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; self.mode == &lt;span class=&#34;string&#34;&gt;&amp;#x27;train&amp;#x27;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    np.random.shuffle(self.indexes)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;並新增獲取 batch 內資料的 get_batch_Models () 及 get_batch_Wireframes ()&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;get_batch_Models&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, idx&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Batch_indexes = self.indexes[idx*self.bsz:(idx+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)*self.bsz]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Train_list_temp = [self.Model_list[k] &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; k &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; Batch_indexes]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    batch_model = np.array([load_image(im,color_mode=&lt;span class=&#34;string&#34;&gt;&amp;#x27;rgb&amp;#x27;&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; im &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; Train_list_temp])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; batch_model&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;get_batch_Wireframes&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, idx&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Batch_indexes = self.indexes[idx*self.bsz:(idx+&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)*self.bsz]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Answer_list_temp = [self.Wireframe_list[k] &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; k &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; Batch_indexes]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; np.array([load_image(im,color_mode=&lt;span class=&#34;string&#34;&gt;&amp;#x27;grayscale&amp;#x27;&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; im &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; Answer_list_temp])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最後完善 &lt;strong&gt;getitem&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;__getitem__&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;self, idx&lt;/span&gt;):&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    batch_model = self.get_batch_Models(idx)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    batch_wireframe = self.get_batch_Wireframes(idx)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; batch_model,batch_wireframe&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://nineko.github.io/2020/08/05/Residual-Dense/</guid>
            <title>[筆記]序列模型(3)-Residual &amp; Dense</title>
            <link>https://nineko.github.io/2020/08/05/Residual-Dense/</link>
            <category>DNN</category>
            <pubDate>Wed, 05 Aug 2020 15:10:33 +0800</pubDate>
            <description><![CDATA[ &lt;h1&gt;目錄&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://nineko.github.io/2020/08/03/Note-BasicSequenceModel/&#34;&gt;基本序列模型&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://nineko.github.io/2020/08/04/Note-Multi-Scale/&#34;&gt;多尺度架構&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Residual &amp;amp; Dense&lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;Residual&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;  Residual 為 &lt;a href=&#34;https://arxiv.org/abs/1512.03385&#34;&gt;ResNet&lt;/a&gt; 中提出的一種架構，中文譯為殘差，其提出的主因是為了解決網路堆疊太深而產生的退化問題，沒錯，網路不是愈深愈好，退化並非 overfitting ，而是誤差確實的提高，這在 ResNet 的論文中有詳細的說明，其實驗證明若只是單純的堆疊網路並不會都是帶來正向的結果。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;M1.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;  為了解決這種情形，殘差的概念被提出，殘差的想法為 ── 本來神經網路學習的過程可以看成找尋一個適當的函式來滿足你的輸入及輸出，假設輸入為 &lt;code&gt;x&lt;/code&gt; ，想要學習的函數為 &lt;code&gt;H(x)&lt;/code&gt; ，那我們今天修改下學習的目標，從 &lt;code&gt;H(x)&lt;/code&gt;  改成 &lt;code&gt;H(x)-x&lt;/code&gt; ，並假設新的目標函式為 &lt;code&gt;F(x)&lt;/code&gt; ，那麼我們可以列出式子 :  &lt;code&gt;F(x)=H(x)-x&lt;/code&gt; ，移項後就變成 &lt;code&gt;F(x)+x=H(x)&lt;/code&gt; ，也就是我們可以利用訓練 &lt;code&gt;F(x)+x&lt;/code&gt;  可以跟原本的 &lt;code&gt;H(x)&lt;/code&gt;  視為等價。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;M2.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;  那麼為甚麼這麼做可以解決網路太深的退化問題呢？若依照論文的解釋，它們認為要找出 &lt;code&gt;F(x)&lt;/code&gt;  的最優解會比 &lt;code&gt;H(x)&lt;/code&gt;  來得容易，因為 &lt;code&gt;F(x)&lt;/code&gt;  是針對誤差的誤差 (感覺好繞) 進行最佳化，所以對於變化更加的敏感，而且就算訓練不好，因為還有本來的 &lt;code&gt;x&lt;/code&gt; ，所以不會太影響本來的結果；&lt;/p&gt;
&lt;p&gt;若上述你已可以理解，那麼非常好，不過這邊還有我依照自己理解的白話解釋，我從特徵角度著手，隨著網路逐層加深，或許有些有用的，但是權重不怎麼高的特徵會被磨滅、被覆蓋等情形發生，表現在結果上便是誤差的提高，也就是退化的真相，殘差架構將前面找出的特徵整組加入目前所計算的特徵上，這意味著不需要擔心這層訓練走歪太多，再不濟還有前一層的結果作為一個基準，以上是我對殘差架構的一點說明及理解，若還是不太清楚，那麼開始動手實做看看，或許你可以找出你自己的理解方式，接下來將會說明該如何實做一個簡單的殘差區塊。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; tensorflow &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; tf&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; keras &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; backend &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; K&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; keras.models &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; Model&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; keras.layers &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; Conv2D,Input,Add,Activation&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;ResidualBlock&lt;/span&gt;():&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 輸入層&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    model_input = Input(shape=(&lt;span class=&#34;number&#34;&gt;15&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;15&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;), name=&lt;span class=&#34;string&#34;&gt;&amp;#x27;input&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;#  1x1 卷積層&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    conv1 = Conv2D(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;, (&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;), activation=&lt;span class=&#34;string&#34;&gt;&amp;#x27;relu&amp;#x27;&lt;/span&gt;, padding=&lt;span class=&#34;string&#34;&gt;&amp;#x27;same&amp;#x27;&lt;/span&gt; ,name=&lt;span class=&#34;string&#34;&gt;&amp;#x27;Conv_1&amp;#x27;&lt;/span&gt;)(model_input)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;#  3x3 卷積層&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    conv2 = Conv2D(&lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;, (&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;), activation=&lt;span class=&#34;string&#34;&gt;&amp;#x27;relu&amp;#x27;&lt;/span&gt;, padding=&lt;span class=&#34;string&#34;&gt;&amp;#x27;same&amp;#x27;&lt;/span&gt; ,name=&lt;span class=&#34;string&#34;&gt;&amp;#x27;Conv_2&amp;#x27;&lt;/span&gt;)(conv1)  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;#  5x5 卷積層&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    conv3 = Conv2D(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;, (&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;), activation=&lt;span class=&#34;string&#34;&gt;&amp;#x27;relu&amp;#x27;&lt;/span&gt;, padding=&lt;span class=&#34;string&#34;&gt;&amp;#x27;same&amp;#x27;&lt;/span&gt; ,name=&lt;span class=&#34;string&#34;&gt;&amp;#x27;Conv_3&amp;#x27;&lt;/span&gt;)(conv2)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 輸出層 - 進行 concatenate&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    model_output= Add([conv1, conv3] ,name=&lt;span class=&#34;string&#34;&gt;&amp;#x27;output&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    model_output = Activation(&lt;span class=&#34;string&#34;&gt;&amp;#x27;relu&amp;#x27;&lt;/span&gt;)(model_output)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    model = Model(inputs=[model_input], outputs=[model_output])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; model&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;M3.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;  建構起來非常的簡單，範例中 &lt;code&gt;model_input&lt;/code&gt;  經過一層 &lt;code&gt;conv1&lt;/code&gt;  後進入 Residual block，因為我們需要將 &lt;code&gt;conv1&lt;/code&gt;  的結果向後傳遞與 Residual block 的輸出相加，所以在 block 的輸出層時 (範例中的 &lt;code&gt;conv3&lt;/code&gt; )，要注意將維度調整為與 &lt;code&gt;conv1&lt;/code&gt;  相同，否則無法正確相加。&lt;/p&gt;
&lt;p&gt;相加的方法為使用 &lt;code&gt;keras.layers&lt;/code&gt;  中的 &lt;code&gt;Add&lt;/code&gt;  類別&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;tf.keras.layers.Add(**kwargs)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;詳細的說明可以參照 &lt;a href=&#34;https://keras.io/api/layers/merging_layers/concatenate/&#34;&gt;Keras 手冊&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Dense&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;  Dense 方法則是可以在 &lt;a href=&#34;https://arxiv.org/abs/1608.06993&#34;&gt;DenseNet&lt;/a&gt; 中看到，其想法與殘差類似，但是不像殘差使用相加的操作，Dense 方法中採用了 concatenate 的方式，並且操作的不只單單前一層，而是前面的所有層，這大大的增強了所有可能的特徵，並且因其採用 concatenate 的方式，所以特徵能夠完全的保留並參予計算。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;M4.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;  雖然看起來很複雜，但是其實非常好理解，與殘差的想法相同，為了不讓網路在計算時失去有用的特徵，所以將先前找到的特徵加入以防消失，只不過 Dense 方法做得更絕而已，它乾脆一股腦兒的把之前計算的通通併在一塊兒，連同這層的輸出一併餵入下一層。&lt;/p&gt;
&lt;p&gt;  已經有了殘差的概念，理解 Dense 應該不會太困難，接下來就直接進行實做，在範例中，只會實做滿足 Dense 概念的小區塊，若需要看它實際的應用成果，建議查看 &lt;a href=&#34;https://arxiv.org/abs/1608.06993&#34;&gt;DenseNet&lt;/a&gt; ，論文中除了 Dense 架構外，還有著很多特別有趣的操作。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; tensorflow &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; tf&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; keras &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; backend &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; K&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; keras.models &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; Model&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; keras.layers &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; Conv2D,Input,concatenate,Activation&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;DenseBlock&lt;/span&gt;():&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 輸入層&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    model_input = Input(shape=(&lt;span class=&#34;number&#34;&gt;15&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;15&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;), name=&lt;span class=&#34;string&#34;&gt;&amp;#x27;input&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;#  卷積層 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    conv1 = Conv2D(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;, (&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;), activation=&lt;span class=&#34;string&#34;&gt;&amp;#x27;relu&amp;#x27;&lt;/span&gt;, padding=&lt;span class=&#34;string&#34;&gt;&amp;#x27;same&amp;#x27;&lt;/span&gt; ,name=&lt;span class=&#34;string&#34;&gt;&amp;#x27;Conv_1&amp;#x27;&lt;/span&gt;)(model_input)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;#  將前一層的輸出與這層的結果合併&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    concat1 = concatenate([model_input, conv1] , axis=&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;,name=&lt;span class=&#34;string&#34;&gt;&amp;#x27;Concat_1&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;#  卷積層 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    conv2 = Conv2D(&lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;, (&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;), activation=&lt;span class=&#34;string&#34;&gt;&amp;#x27;relu&amp;#x27;&lt;/span&gt;, padding=&lt;span class=&#34;string&#34;&gt;&amp;#x27;same&amp;#x27;&lt;/span&gt; ,name=&lt;span class=&#34;string&#34;&gt;&amp;#x27;Conv_2&amp;#x27;&lt;/span&gt;)(concat1)  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;#  將前面兩層的輸出與這層的結果合併&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    concat2 = concatenate([concat1, conv2] , axis=&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;,name=&lt;span class=&#34;string&#34;&gt;&amp;#x27;Concat_2&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;#  卷積層 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    conv3 = Conv2D(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;, (&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;), activation=&lt;span class=&#34;string&#34;&gt;&amp;#x27;relu&amp;#x27;&lt;/span&gt;, padding=&lt;span class=&#34;string&#34;&gt;&amp;#x27;same&amp;#x27;&lt;/span&gt; ,name=&lt;span class=&#34;string&#34;&gt;&amp;#x27;Conv_3&amp;#x27;&lt;/span&gt;)(concat2)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 輸出層 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    model_output= concatenate([concat2, conv3] , axis=&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;,name=&lt;span class=&#34;string&#34;&gt;&amp;#x27;Concat_3&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    model = Model(inputs=[model_input], outputs=[model_output])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; model&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;M5.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;  可以看到範例中每個餵入下層卷積的輸入都是由前面層所合併的，但是別看深度愈來愈多，好像會很花計算資源，但其實以生成特徵的花費來看，同樣一個 256 維的特徵，一個是直接計算出 256 維，一個是由前面 4 層的 64 維組裝起來，差異就出來了，使用這種方法，反而可以減少產生特徵的花費，並可以保留前面的特徵，防止其退化，這種操作還是很巧妙的。&lt;/p&gt;
&lt;p&gt;  至此，我們已經說明了序列模型的建構以及兩種架構技巧，對於很多應用來說，這些已經足夠應付，不過該如何變化，還是需要自行去好好研究，甚至模型架構也只是深度學習的一環而已，還有很重要的訓練資料及損失函數等等部分都是進行一個深度學習專案需要考慮的事情，深度學習的坑是很深的，並不是單純的把資料丟進去讓它慢慢跑就好，所以，學無止盡，既然踏入了深度學習這個巨坑，只能持續的接受更多的知識了。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://nineko.github.io/2020/08/04/Note-Multi-Scale/</guid>
            <title>[筆記]序列模型(2)-多尺度架構</title>
            <link>https://nineko.github.io/2020/08/04/Note-Multi-Scale/</link>
            <category>DNN</category>
            <pubDate>Tue, 04 Aug 2020 11:15:06 +0800</pubDate>
            <description><![CDATA[ &lt;h1&gt;目錄&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://nineko.github.io/2020/08/03/Note-BasicSequenceModel/&#34;&gt;基本序列模型&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;多尺度架構&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://nineko.github.io/2020/08/05/Residual-Dense/&#34;&gt;Residual &amp;amp; Dense&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;多尺度架構&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;  多尺度架構能夠在 GoogLeNet 中的 Inception 架構中廣泛看到，其概念想法為利用不同卷積核大小的卷積層來給予網路更多的選擇去擷取適當的特徵，在架構上，我們能夠把多尺度架構分成兩個步驟──分散及匯集；分散指的是將輸入分散至不同大小卷積核的卷積層，匯集則是將不同卷積層的結果重新組裝成一個張量，所以在進行卷積計算時，會利用 Padding 來確保輸出張量的長寬是一致的，圖解的話像是這種感覺。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;M1.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;  可以看到為了進行多尺度的計算，我們無法去操作特徵圖的長寬，這意味著龐大的參數計算，為了緩和計算負擔，我們可以利用多次卷積降低兩維的大小，將資訊累積在深度上，多尺度計算時也可以利用 1x1 的卷積核來降低深度維度，使用這些技巧來建構多尺度架構，在結果與參數使用量上取得適當的平衡吧。&lt;/p&gt;
&lt;p&gt;接下來將會用簡單的範例來示範如何建構一個多尺度架構。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; tensorflow &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; tf&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; keras &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; backend &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; K&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; keras.models &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; Model&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; keras.layers &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; Conv2D,Input,concatenate&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;MultiScaleModel&lt;/span&gt;():&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 輸入層&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    model_input = Input(shape=(&lt;span class=&#34;number&#34;&gt;15&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;15&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;), name=&lt;span class=&#34;string&#34;&gt;&amp;#x27;input&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;#  1x1 卷積層&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    conv1 = Conv2D(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;, (&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;), activation=&lt;span class=&#34;string&#34;&gt;&amp;#x27;relu&amp;#x27;&lt;/span&gt;, padding=&lt;span class=&#34;string&#34;&gt;&amp;#x27;same&amp;#x27;&lt;/span&gt; ,name=&lt;span class=&#34;string&#34;&gt;&amp;#x27;Conv_1_1&amp;#x27;&lt;/span&gt;)(model_input)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;#  3x3 卷積層&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    conv3 = Conv2D(&lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;, (&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;), activation=&lt;span class=&#34;string&#34;&gt;&amp;#x27;relu&amp;#x27;&lt;/span&gt;, padding=&lt;span class=&#34;string&#34;&gt;&amp;#x27;same&amp;#x27;&lt;/span&gt; ,name=&lt;span class=&#34;string&#34;&gt;&amp;#x27;Conv_3_3&amp;#x27;&lt;/span&gt;)(model_input)  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;#  5x5 卷積層&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    conv5 = Conv2D(&lt;span class=&#34;number&#34;&gt;30&lt;/span&gt;, (&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;), activation=&lt;span class=&#34;string&#34;&gt;&amp;#x27;relu&amp;#x27;&lt;/span&gt;, padding=&lt;span class=&#34;string&#34;&gt;&amp;#x27;same&amp;#x27;&lt;/span&gt; ,name=&lt;span class=&#34;string&#34;&gt;&amp;#x27;Conv_5_5&amp;#x27;&lt;/span&gt;)(model_input)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 輸出層 - 進行 concatenate&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    model_output= concatenate([conv1, conv3, conv5] , axis=&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;,name=&lt;span class=&#34;string&#34;&gt;&amp;#x27;output&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    model = Model(inputs=[model_input], outputs=[model_output])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; model&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用 &lt;code&gt;model.summary()&lt;/code&gt;  可以更清楚的看到架構。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;M2.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;這裡值得一提的是，在進行 concatenate 時，需要指定接合的維度。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;tf.keras.layers.Concatenate(axis=&lt;span class=&#34;number&#34;&gt;-1&lt;/span&gt;, **kwargs)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在這裡因為我們的卷積層輸出為 (None,15,15,10) 、 (None,15,15,20) 、 (None,15,15,30) ，需要接合的為第三維度，所以需要設定 &lt;code&gt;axis=3&lt;/code&gt; ，若想了解更多資訊，可以參考 &lt;a href=&#34;https://keras.io/api/layers/merging_layers/concatenate/&#34;&gt;Keras 手冊&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;  在範例中，我們只建構了一層最簡單的多尺度架構，在使用上這樣的一層只是一個 Block ，利用堆疊這些 Block 如同在建構一般卷積層一般，更深的層數意味著更複雜的特徵組合，然而比起普通卷積，多尺度的一層中包含了不同卷積核的特徵，多層疊加下會得到更複雜的特徵，給予我們設計網路架構時多了一種思路。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://nineko.github.io/2020/08/03/Note-BasicSequenceModel/</guid>
            <title>[筆記]序列模型(1)-基本序列模型</title>
            <link>https://nineko.github.io/2020/08/03/Note-BasicSequenceModel/</link>
            <category>DNN</category>
            <pubDate>Mon, 03 Aug 2020 15:55:22 +0800</pubDate>
            <description><![CDATA[ &lt;h1&gt;目錄&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;基本序列模型&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://nineko.github.io/2020/08/04/Note-Multi-Scale/&#34;&gt;多尺度架構&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://nineko.github.io/2020/08/05/Residual-Dense/&#34;&gt;Residual &amp;amp; Dense&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;基本序列模型&lt;/h1&gt;
&lt;hr&gt;
&lt;p&gt;  序列模型為建構深度學習網路時最直觀也最簡便的方式，在大多數時候，序列模型往往能夠讓你在解決問題上提供一個初步的解決方案。&lt;/p&gt;
&lt;p&gt;不過儘管它如此單純，依舊值得好好研究，在本篇中將會從最基本的開始說明，也就是沒有任何特別操作，單純一層疊一層的方式來建構深度學習網路。&lt;/p&gt;
&lt;p&gt;這種方式在初期被大量使用，它方便架設，也很容易理解，但是它因簡單的架構，無法處理太過於複雜的特徵，也沒有任何機制去降低計算量，可說是有利有弊。&lt;/p&gt;
&lt;h2&gt;建構&lt;/h2&gt;
&lt;hr&gt;
&lt;h3&gt;全連接層&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;在這個筆記裡，範例皆為 Keras 實做版本，Keras 版本為 2.4.3 ，基底 Tensorflow 版本為 2.3.0 。&lt;/p&gt;
&lt;p&gt;假設我們想要建構一個輸入長度為 100 的向量，經過兩層輸出為 50 的隱藏層後，最後輸出長度為 10 的向量。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;M1.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;p&gt;在 Keras 中，我們可以使用很簡單的方式來建構一個序列模型。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; tensorflow &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; tf&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; keras.models &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; Model&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; keras.layers &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; Input,Dense&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; keras &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; backend &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; K&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;SequenceModel&lt;/span&gt;():&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 輸入層&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    model_input = Input(shape=(&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;), name=&lt;span class=&#34;string&#34;&gt;&amp;#x27;input&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 隱藏層 1 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    hidden = Dense(&lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;, activation=&lt;span class=&#34;string&#34;&gt;&amp;#x27;sigmoid&amp;#x27;&lt;/span&gt;,name=&lt;span class=&#34;string&#34;&gt;&amp;quot;hidden_1&amp;quot;&lt;/span&gt;)(model_input)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 隱藏層 2 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    hidden = Dense(&lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;, activation=&lt;span class=&#34;string&#34;&gt;&amp;#x27;sigmoid&amp;#x27;&lt;/span&gt;,name=&lt;span class=&#34;string&#34;&gt;&amp;quot;hidden_2&amp;quot;&lt;/span&gt;)(hidden)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 輸出層 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    model_output = Dense(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;, activation=&lt;span class=&#34;string&#34;&gt;&amp;#x27;sigmoid&amp;#x27;&lt;/span&gt;,name=&lt;span class=&#34;string&#34;&gt;&amp;quot;output&amp;quot;&lt;/span&gt;)(hidden)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    model = Model(inputs=[model_input], outputs=[model_output])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; model&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  可以看到由 Keras 建構只需要專心建構網路的架構，而不需要做 Weight 及 Bias 的數量及初始化定義，它會以預設的參數進行建構，若要修改也可以帶入引數進行設定。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;keras.layers.Dense(units, &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                   activation=&lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                   use_bias=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                   kernel_initializer=&lt;span class=&#34;string&#34;&gt;&amp;#x27;glorot_uniform&amp;#x27;&lt;/span&gt;, bias_initializer=&lt;span class=&#34;string&#34;&gt;&amp;#x27;zeros&amp;#x27;&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                   kernel_regularizer=&lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                   bias_regularizer=&lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                   activity_regularizer=&lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                   kernel_constraint=&lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;, &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                   bias_constraint=&lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;若要了解更詳細的設定可以查看 &lt;a href=&#34;https://keras.io/api/layers/core_layers/dense/&#34;&gt;Keras 手冊&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;卷積層&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;  若要建構一個 DNN ，卷積層是必須的，與全連接層相同的做法，只是呼叫的函式不同而已。&lt;/p&gt;
&lt;p&gt;  在接下來的範例中，輸入張量為 100x100x3 ，經過兩層 50 個卷積核為 3x3 ，Stride 為 2 ，不使用 Padding 的卷積層後，進行 Flatten ，最後再接入向量長度為 10 的輸出層。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;M2.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; tensorflow &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; tf&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; keras.models &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; Model&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; keras.layers &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; Input,Dense,Conv2D&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; keras &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; backend &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; K&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;SequenceModel&lt;/span&gt;():&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 輸入層&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    model_input = Input(shape=(&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;), name=&lt;span class=&#34;string&#34;&gt;&amp;#x27;input&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 隱藏層 1 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    hidden = Conv2D(&lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;, (&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;), activation=&lt;span class=&#34;string&#34;&gt;&amp;#x27;relu&amp;#x27;&lt;/span&gt;, padding=&lt;span class=&#34;string&#34;&gt;&amp;#x27;valid&amp;#x27;&lt;/span&gt;,name=&lt;span class=&#34;string&#34;&gt;&amp;#x27;hidden_1&amp;#x27;&lt;/span&gt;)(model_input)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 隱藏層 2 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    hidden = Conv2D(&lt;span class=&#34;number&#34;&gt;50&lt;/span&gt;, (&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;), activation=&lt;span class=&#34;string&#34;&gt;&amp;#x27;relu&amp;#x27;&lt;/span&gt;, padding=&lt;span class=&#34;string&#34;&gt;&amp;#x27;valid&amp;#x27;&lt;/span&gt;,name=&lt;span class=&#34;string&#34;&gt;&amp;#x27;hidden_2&amp;#x27;&lt;/span&gt;)(model_input)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# Flatten&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Flatten_layer = Flatten(name=&lt;span class=&#34;string&#34;&gt;&amp;#x27;flatten&amp;#x27;&lt;/span&gt;)(hidden)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 輸出層 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    model_output = Dense(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;, activation=&lt;span class=&#34;string&#34;&gt;&amp;#x27;sigmoid&amp;#x27;&lt;/span&gt;,name=&lt;span class=&#34;string&#34;&gt;&amp;quot;output&amp;quot;&lt;/span&gt;)(Flatten_layer)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    model = Model(inputs=[model_input], outputs=[model_output])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; model&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;同樣，這只是最基本的應用，若要更進階的使用請詳看 &lt;a href=&#34;https://keras.io/api/layers/convolution_layers/&#34;&gt;Keras 手冊&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;  以上，我們已經知道該怎麼建構卷積層及全連接層，使用這兩者已經可以建構一個影像辨識的應用，像是一開始的 AlexNet 及 VGG 系列都是使用單純的卷積加上全連接層建構而成的，接下來，你可以建構自己的架構嘗試進行影像辨識，可以使用&lt;a href=&#34;http://yann.lecun.com/exdb/mnist/&#34;&gt;手寫辨識 MINST&lt;/a&gt; 或是 &lt;a href=&#34;https://www.kaggle.com/c/dogs-vs-cats&#34;&gt;Kaggle 的 Dogs v.s Cats&lt;/a&gt; 進行練習。&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
